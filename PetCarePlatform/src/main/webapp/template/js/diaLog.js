//블록체인 연결
         console.log('starting...');
         web3 = new Web3(window.web3.currentProvider);
          if(web3) 
              console.log('connected');
          else 
              console.log('not connected');
         
         
        // web3.eth.defaultAccount = web3.eth.accounts[0];와 같은의미
         
         //첫번째 계정 조회
         let account;
         
         web3.eth.getAccounts(function(err,accs){
             if(err != null){
                 alert('There was an error fetching your accounts.')
                 return
             }
             if(accs.length ===0){
                // alert("Couldn't get any accounts!")
                 return
             }
             account = accs[0];
             console.log(account);
         })
             // 여기에 우리가 만든 컨트랙트에 접근하는 방법을 제시한다:
         var abi = [
			{
				"constant": true,
				"inputs": [
					{
						"name": "",
						"type": "uint256"
					}
				],
				"name": "diaLogMapping",
				"outputs": [
					{
						"name": "r_no",
						"type": "uint256"
					},
					{
						"name": "d_name",
						"type": "string"
					},
					{
						"name": "result",
						"type": "string"
					},
					{
						"name": "symptom",
						"type": "string"
					},
					{
						"name": "w_date",
						"type": "string"
					},
					{
						"name": "m_id",
						"type": "string"
					},
					{
						"name": "p_id",
						"type": "string"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"name": "r_no",
						"type": "uint256"
					},
					{
						"name": "d_name",
						"type": "string"
					},
					{
						"name": "result",
						"type": "string"
					},
					{
						"name": "symptom",
						"type": "string"
					},
					{
						"name": "w_date",
						"type": "string"
					},
					{
						"name": "m_id",
						"type": "string"
					},
					{
						"name": "p_id",
						"type": "string"
					}
				],
				"name": "diagnosis",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"name": "r_no",
						"type": "uint256"
					}
				],
				"name": "diaLogSearch",
				"outputs": [
					{
						"name": "d_name",
						"type": "string"
					},
					{
						"name": "result",
						"type": "string"
					},
					{
						"name": "symptom",
						"type": "string"
					},
					{
						"name": "w_date",
						"type": "string"
					},
					{
						"name": "m_id",
						"type": "string"
					},
					{
						"name": "p_id",
						"type": "string"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			}
		]
		/* abi generated by the compiler */
         
         var contractAddress = "0xcb80fbc48d8586d923a101a045515b315c33f76c"; /* our contract address on Ethereum after deploying */
         var diaLog = new web3.eth.Contract(abi,contractAddress);
         
         
        /* 나중에 쓸거 블록체인 r_no입력시 조회기능
         $("#listBtn").click(function(e){
        var r_no = $("#list").val();
        console.log(r_no);
        
        diaLog.methods.diaLogSearch(r_no)
         .call({from: account, gas:3000000})
          .then(function(result){console.log(result);})
         })*/
         
         
         
         
         
         
         